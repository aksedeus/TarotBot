# bot.py
import random
from datetime import datetime
import telebot
from telebot import types
from telebot.types import LabeledPrice

from config import API_TOKEN, provider_token
from auth import register_user, login_user, show_main_menu
from db import add_payment, get_payment_count, get_bot_uses_remaining, decrease_bot_uses
from tarot import TAROT_CARDS
from horoscope import horoscope_parts, zodiacs
from compatibility import relationship_factors
from numerology import specifications


bot = telebot.TeleBot(API_TOKEN)

api_key = provider_token

prices = [LabeledPrice(label='Test Product', amount=8000)]  # 1000 = 10.00 RUB

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "–ë–æ—Ç –ú–∏—Å—Ç–∏–∫ –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑—É—á–∏—Ç—å –º–∞–≥–∏—é –∫–∞—Ä—Ç –¢–∞—Ä–æ, –ì–æ—Ä–æ—Å–∫–æ–ø–æ–≤, –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏–∏. ‚ú®\n\n"
                          " –í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π –∏ —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏—Å—Ç–∏—á–µ—Å–∫—É—é –º—É–¥—Ä–æ—Å—Ç—å –¢–∞—Ä–æ –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏. üîÆ\n\n"
                          " –û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –º–∏—Ä –∏—Å–∫—É—Å—Å—Ç–≤–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∏ –¥—É—Ö–æ–≤–Ω–æ–π –≥–ª—É–±–∏–Ω—ã —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞ –¢–∞—Ä–æ –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ! üíú")
    bot.reply_to(message, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /register –∏–ª–∏ /login.")

@bot.message_handler(commands=['register'])
def register(message):
    register_user(bot, message)

@bot.message_handler(commands=['login'])
def login(message):
    login_user(bot, message)

@bot.message_handler(commands=['tarot'])
def ask_how_many_cards(message):
    user_id = message.from_user.id
    uses_remaining = get_bot_uses_remaining(user_id)

    if uses_remaining > 0:
        decrease_bot_uses(user_id)
        askMarkup = types.InlineKeyboardMarkup(row_width=2)
        button1 = types.InlineKeyboardButton('–ö–∞—Ä—Ç–∞ –¥–Ω—è', callback_data='1')
        button2 = types.InlineKeyboardButton('–¢—Ä–∏ –∫–∞—Ä—Ç—ã', callback_data='3')
        button3 = types.InlineKeyboardButton('–ü—è—Ç—å –∫–∞—Ä—Ç', callback_data='5')
        button4 = types.InlineKeyboardButton('–î–µ–≤—è—Ç—å –∫–∞—Ä—Ç', callback_data='9')
        askMarkup.add(button1, button2, button3, button4)

        bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å? üÉè\n–ö–∞–∂–¥–∞—è –∫–∞—Ä—Ç–∞ - —ç—Ç–æ –æ—Ç–≤–µ—Ç, –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –≤–∞–º–∏ –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ üåü\n", reply_markup=askMarkup)
    else:
        bot.send_message(message.chat.id,
                         "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. –•–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pay, —á—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ 25 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π.")
@bot.callback_query_handler(func=lambda call: call.data in ['1', '3', '5', '9'])
def handle_card_selection(call):
    global num_cards
    num_cards = int(call.data)

    askMarkup = types.InlineKeyboardMarkup(row_width=2)
    button1 = types.InlineKeyboardButton('–õ—é–±–æ–≤—å ‚ù§Ô∏è', callback_data='–õ—é–±–æ–≤—å')
    button2 = types.InlineKeyboardButton('–†–∞–±–æ—Ç–∞ üõ†Ô∏è', callback_data='–†–∞–±–æ—Ç–∞')
    button3 = types.InlineKeyboardButton('–ó–¥–æ—Ä–æ–≤—å–µ üí™', callback_data='–ó–¥–æ—Ä–æ–≤—å–µ')
    button4 = types.InlineKeyboardButton('–ù–∞ –º–µ—Å—è—Ü üå†', callback_data='–ù–∞ –º–µ—Å—è—Ü')
    askMarkup.add(button1, button2, button3, button4)

    bot.send_message(call.message.chat.id, "–ù–∞ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥? üî•\n", reply_markup=askMarkup)

@bot.callback_query_handler(func=lambda call: call.data in ['–õ—é–±–æ–≤—å', '–†–∞–±–æ—Ç–∞', '–ó–¥–æ—Ä–æ–≤—å–µ', '–ù–∞ –º–µ—Å—è—Ü'])
def send_tarot_layout(call):

    topic = call.data.upper()

    layout = choose_tarot_cards(num_cards)
    response = f"–†–∞—Å–∫–ª–∞–¥ –Ω–∞ —Ç–µ–º—É '{topic}':\n\n"
    bot.send_message(call.message.chat.id, response)
    for card in layout:
        type = random.randint(1,2)
        value = card['image']
        if type == 1:
            with open(value, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
                bot.send_message(call.message.chat.id, f"–ö–∞—Ä—Ç–∞: {card['name']}\n\n–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ: {card['meaning']}\n")
        elif type == 2:
            with open(value, "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
                bot.send_message(call.message.chat.id, f"–ü–ï–†–ï–í–ï–†–ù–£–¢–ê–Ø –ö–∞—Ä—Ç–∞: {card['name']}\n\n–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ: {card['reversed']}\n")


    show_main_menu(bot, call.message)
def choose_tarot_cards(num_cards):
    return random.sample(TAROT_CARDS, num_cards)

@bot.message_handler(commands=['horoscope'])
def ask_horoscope(message):
    user_id = message.from_user.id
    uses_remaining = get_bot_uses_remaining(user_id)

    if uses_remaining > 0:
        decrease_bot_uses(user_id)
        askMarkup = types.InlineKeyboardMarkup(row_width=3)
        button1 = types.InlineKeyboardButton('‚ôà –û–≤–µ–Ω', callback_data='–û–≤–µ–Ω')
        button2 = types.InlineKeyboardButton('‚ôâ –¢–µ–ª–µ—Ü', callback_data='–¢–µ–ª–µ—Ü')
        button3 = types.InlineKeyboardButton('‚ôä –ë–ª–∏–∑–Ω–µ—Ü—ã', callback_data='–ë–ª–∏–∑–Ω–µ—Ü—ã')
        button4 = types.InlineKeyboardButton('‚ôã –†–∞–∫', callback_data='–†–∞–∫')
        button5 = types.InlineKeyboardButton('‚ôå –õ–µ–≤', callback_data='–õ–µ–≤')
        button6 = types.InlineKeyboardButton('‚ôç –î–µ–≤–∞', callback_data='–î–µ–≤–∞')
        button7 = types.InlineKeyboardButton('‚ôé –í–µ—Å—ã', callback_data='–í–µ—Å—ã')
        button8 = types.InlineKeyboardButton('‚ôè –°–∫–æ—Ä–ø–∏–æ–Ω', callback_data='–°–∫–æ—Ä–ø–∏–æ–Ω')
        button9 = types.InlineKeyboardButton('‚õé –ó–º–µ–µ–Ω–æ—Å–µ—Ü', callback_data='–ó–º–µ–µ–Ω–æ—Å–µ—Ü')
        button10 = types.InlineKeyboardButton('‚ôê –°—Ç—Ä–µ–ª–µ—Ü	', callback_data='–°—Ç—Ä–µ–ª–µ—Ü')
        button11 = types.InlineKeyboardButton('‚ôë –ö–æ–∑–µ—Ä–æ–≥', callback_data='–ö–æ–∑–µ—Ä–æ–≥')
        button12 = types.InlineKeyboardButton('‚ôí –í–æ–¥–æ–ª–µ–π', callback_data='–í–æ–¥–æ–ª–µ–π')
        button13 = types.InlineKeyboardButton('‚ôì –†—ã–±—ã', callback_data='–†—ã–±—ã')
        askMarkup.add(button1, button2, button3, button4, button5, button6, button7, button8, button9, button10, button11, button12, button13)

        bot.send_message(message.chat.id,
                         "–ö–∞–∫–æ–π —É –≤–∞—Å –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞? üåü",
                         reply_markup=askMarkup)
    else:
        bot.send_message(message.chat.id,
                         "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. –•–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pay, —á—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ 25 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π.")


@bot.callback_query_handler(func=lambda call: call.data in ['–û–≤–µ–Ω', '–¢–µ–ª–µ—Ü', '–ë–ª–∏–∑–Ω–µ—Ü—ã', '–†–∞–∫', '–õ–µ–≤', '–î–µ–≤–∞', '–í–µ—Å—ã', '–°–∫–æ—Ä–ø–∏–æ–Ω', '–ó–º–µ–µ–Ω–æ—Å–µ—Ü', '–°—Ç—Ä–µ–ª–µ—Ü', '–ö–æ–∑–µ—Ä–æ–≥', '–í–æ–¥–æ–ª–µ–π', '–†—ã–±—ã'])
def send_horoscope(call):
    zodiac = zodiacs[call.data]
    topic = call.data.upper()
    response = f"–†–∞—Å–∫–ª–∞–¥ –¥–ª—è –∑–Ω–∞–∫–∞ '{topic}':\n\n"
    response += generate_horoscope(horoscope_parts)

    with open(zodiac, "rb") as photo:
        bot.send_photo(call.message.chat.id, photo, response)

    show_main_menu(bot, call.message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞
def generate_horoscope(horoscope_parts):
    –Ω–∞—á–∞–ª–æ = random.choice(horoscope_parts["–ù–∞—á–∞–ª–æ"])
    —Å–µ—Ä–µ–¥–∏–Ω–∞ = random.choice(horoscope_parts["–°–µ—Ä–µ–¥–∏–Ω–∞"])
    –∫–æ–Ω–µ—Ü = random.choice(horoscope_parts["–ö–æ–Ω–µ—Ü"])
    return f"{–Ω–∞—á–∞–ª–æ} {—Å–µ—Ä–µ–¥–∏–Ω–∞} {–∫–æ–Ω–µ—Ü}"

@bot.message_handler(commands=['numerology'])
def ask_gender(message):
    user_id = message.from_user.id
    uses_remaining = get_bot_uses_remaining(user_id)

    if uses_remaining > 0:
        decrease_bot_uses(user_id)
        askMarkup = types.InlineKeyboardMarkup(row_width=2)
        button1 = types.InlineKeyboardButton('–ñ–µ–Ω—â–∏–Ω–∞ üôã‚Äç‚ôÄÔ∏è', callback_data='woman')
        button2 = types.InlineKeyboardButton('–ú—É–∂—á–∏–Ω–∞ üôãüèª‚Äç‚ôÇÔ∏è', callback_data='man')
        askMarkup.add(button1, button2)

        bot.send_message(message.chat.id, "–í–∞—à –ø–æ–ª? üåü", reply_markup=askMarkup)
    else:
        bot.send_message(message.chat.id,
                         "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. –•–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pay, —á—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ 25 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π.\n–õ–∏–±–æ –∑–∞–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –¥–µ–Ω—å –∏ –≤–∞–º –Ω–∞—á–∏—Å–ª—è—Ç—Å—è –Ω–æ–≤—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!")

@bot.callback_query_handler(func=lambda call: call.data in ['woman', 'man'])
def handle_message(call):
    bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
    bot.register_next_step_handler(call.message, get_birth_date)
def get_birth_date(message):
    try:
        birth_date = message.text.strip()
        matrix_result = analyze_birth_date(birth_date)
        bot.send_message(message.chat.id, matrix_result)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∞–ª–≥–æ—Ä–∏—Ç–º –ú–∞—Ç—Ä–∏—Ü—ã –ü–∏—Ñ–∞–≥–æ—Ä–∞
def analyze_birth_date(birth_date):
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ —Ü–∏—Ñ—Ä
    day, month, year = map(int, birth_date.split('.'))
    digits = list(map(int, list(f"{day:02}{month:02}{year}")))

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö —á–∏—Å–µ–ª
    sum_all_digits = sum(digits)
    sum_of_digits = sum(map(int, str(sum_all_digits)))
    third_number = sum_all_digits - 2 * int(str(day)[0])
    fourth_number = sum(map(int, str(third_number)))

    # –í—Å–µ —Ü–∏—Ñ—Ä—ã –¥–ª—è –º–∞—Ç—Ä–∏—Ü—ã
    all_digits = digits + list(map(int, str(sum_all_digits))) + list(map(int, str(sum_of_digits))) + list(map(int, str(third_number))) + list(map(int, str(fourth_number)))

    # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –ü–∏—Ñ–∞–≥–æ—Ä–∞
    matrix = {i: 0 for i in range(1, 10)}
    for digit in all_digits:
        if digit != 0:
            matrix[digit] += 1

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    matrix_result = f"–ú–∞—Ç—Ä–∏—Ü–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞ –¥–ª—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è {birth_date}:\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ –º–∞—Ç—Ä–∏—Ü–µ
    interpretation = {
        1: "–ï–¥–∏–Ω–∏—Ü—ã üíé (–•–∞—Ä–∞–∫—Ç–µ—Ä): ",
        2: "–î–≤–æ–π–∫–∏ ‚ö°Ô∏è (–≠–Ω–µ—Ä–≥–∏—è): ",
        3: "–¢—Ä–æ–π–∫–∏ üî• (–ò–Ω—Ç–µ—Ä–µ—Å): ",
        4: "–ß–µ—Ç–≤–µ—Ä–∫–∏ üí™ (–ó–¥–æ—Ä–æ–≤—å–µ): ",
        5: "–ü—è—Ç–µ—Ä–∫–∏ üí° (–õ–æ–≥–∏–∫–∞): ",
        6: "–®–µ—Å—Ç–µ—Ä–∫–∏ üõ†Ô∏è (–¢—Ä—É–¥): ",
        7: "–°–µ–º–µ—Ä–∫–∏ üçÄ (–£–¥–∞—á–∞): ",
        8: "–í–æ—Å—å–º–µ—Ä–∫–∏ üõ°Ô∏è (–î–æ–ª–≥): ",
        9: "–î–µ–≤—è—Ç–∫–∏ ‚ù§Ô∏è (–ü–∞–º—è—Ç—å): "
    }

    for i in range(1, 10):
        count = matrix[i]
        if count == 0:
            matrix_result += f"{interpretation[i]}üí´\n"
        else:
            matrix_result += f"{interpretation[i]}{'‚≠ê' * count}\n"

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    self_esteem = matrix[1] + matrix[2] + matrix[3]
    household = matrix[4] + matrix[5] + matrix[6]
    talent = matrix[7] + matrix[8] + matrix[9]
    goal = matrix[1] + matrix[4] + matrix[7]
    family = matrix[2] + matrix[5] + matrix[8]
    habits = matrix[3] + matrix[6] + matrix[9]
    spirit = matrix[1] + matrix[5] + matrix[9]
    temperament = matrix[3] + matrix[5] + matrix[7]

    # –°–ª–æ–≤–∞—Ä—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π
    additional_interpretation = {
        "–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞": self_esteem,
        "–ë—ã—Ç": household,
        "–¢–∞–ª–∞–Ω—Ç": talent,
        "–¶–µ–ª—å": goal,
        "–°–µ–º—å—è": family,
        "–ü—Ä–∏–≤—ã—á–∫–∏": habits,
        "–î—É—Ö": spirit,
        "–¢–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç": temperament
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    matrix_result += "\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ üîÆ:\n"
    for key, value in additional_interpretation.items():
        if key in specifications and value in specifications[key]:
            description = specifications[key][value]
            matrix_result += f"{key}: {value} - {description}\n"
        else:
            matrix_result += f"{key}: {value}\n"

    return matrix_result

@bot.message_handler(commands=['compatibility'])
def ask_compatibility(message):
    user_id = message.from_user.id
    uses_remaining = get_bot_uses_remaining(user_id)

    if uses_remaining > 0:
        decrease_bot_uses(user_id)
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ü–∞—Ä—Ç–Ω–µ—Ä–∞ 1 –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì üôã‚Äç‚ôÄÔ∏è")
        bot.register_next_step_handler(message, get_first_birth_date)
    else:
        bot.send_message(message.chat.id,
                         "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. –•–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pay, —á—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ 25 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π.")
def get_first_birth_date(message):
    try:
        birth_date1 = message.text.strip()
        datetime.strptime(birth_date1, "%d.%m.%Y")
        bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ü–∞—Ä—Ç–Ω–µ—Ä–∞ 2 –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì üôãüèª‚Äç‚ôÇÔ∏è")
        bot.register_next_step_handler(message, get_second_birth_date, birth_date1)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ü–∞—Ä—Ç–Ω–µ—Ä–∞ 1 –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        bot.register_next_step_handler(message, get_first_birth_date)

def get_second_birth_date(message, birth_date1):
    try:
        birth_date2 = message.text.strip()
        datetime.strptime(birth_date2, "%d.%m.%Y")
        compatibility_result = analyze_compatibility(birth_date1, birth_date2)
        bot.send_message(message.chat.id, compatibility_result)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ü–∞—Ä—Ç–Ω–µ—Ä–∞ 2 –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        bot.register_next_step_handler(message, get_second_birth_date, birth_date1)

def analyze_compatibility(birth_date1, birth_date2):
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ —Ü–∏—Ñ—Ä –¥–ª—è –æ–±–æ–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
    day1, month1, year1 = map(int, birth_date1.split('.'))
    digits1 = list(map(int, list(f"{day1:02}{month1:02}{year1}")))

    day2, month2, year2 = map(int, birth_date2.split('.'))
    digits2 = list(map(int, list(f"{day2:02}{month2:02}{year2}")))

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ç—Ä–∏—Ü—ã –ü–∏—Ñ–∞–≥–æ—Ä–∞
    def calculate_matrix(digits):
        sum_all_digits = sum(digits)
        sum_of_digits = sum(map(int, str(sum_all_digits)))
        third_number = sum_all_digits - 2 * int(str(day1)[0])
        fourth_number = sum(map(int, str(third_number)))
        all_digits = digits + list(map(int, str(sum_all_digits))) + list(map(int, str(sum_of_digits))) + list(map(int, str(third_number))) + list(map(int, str(fourth_number)))
        matrix = {i: 0 for i in range(1, 10)}
        for digit in all_digits:
            if digit != 0:
                matrix[digit] += 1
        return matrix

    # –†–∞—Å—á–µ—Ç –º–∞—Ç—Ä–∏—Ü –¥–ª—è –æ–±–æ–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
    matrix1 = calculate_matrix(digits1)
    matrix2 = calculate_matrix(digits2)

    # –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Ç—Ä–∏—Ü
    compatibility_result = f"–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–∞—Ä—ã üë©‚Äç‚ù§Ô∏è‚Äçüë®:\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    compatibility_result += f"–î–ª—è —á–µ–≥–æ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏—Å—å üéØ: {get_description(relationship_factors, '–¥–ª—è —á–µ–≥–æ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏—Å—å', matrix1[1] + matrix2[1])}\n\n"
    compatibility_result += f"–ö–∞–∫ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –ø–∞—Ä–∞ üî•: {get_description(relationship_factors, '–∫–∞–∫ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –ø–∞—Ä–∞', matrix1[2] + matrix2[2])}\n\n"
    compatibility_result += f"–î–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π –≤–∞–∂–Ω–æ ‚≠ê: {get_description(relationship_factors, '–¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π –≤–∞–∂–Ω–æ', matrix1[3] + matrix2[3])}\n\n"
    compatibility_result += f"–ü—Ä–æ–±–ª–µ–º—ã –∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ üõë: {get_description(relationship_factors, '–ø—Ä–æ–±–ª–µ–º—ã –∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏', matrix1[4] + matrix2[4])}\n\n"
    compatibility_result += f"–ó–∞–¥–∞—á–∏ –ø–∞—Ä—ã üèÖ: {get_description(relationship_factors, '–∑–∞–¥–∞—á–∏ –ø–∞—Ä—ã', matrix1[5] + matrix2[5])}\n\n"
    compatibility_result += f"–ü—Ä–∏—á–∏–Ω—ã —Ä–∞—Å—Å—Ç–∞–≤–∞–Ω–∏—è üö©: {get_description(relationship_factors, '–ø—Ä–∏—á–∏–Ω—ã —Ä–∞—Å—Å—Ç–∞–≤–∞–Ω–∏—è', matrix1[6] + matrix2[6])}\n"

    return compatibility_result

def get_description(dictionary, key, sum_value):
    return dictionary[key].get(sum_value, "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

@bot.message_handler(commands=['pay'])
def buy(message):
    bot.send_invoice(
        message.chat.id,
        title="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥",
        description="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ 25 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞",
        provider_token=provider_token,
        currency='RUB',
        prices=prices,
        start_parameter='test-invoice',
        invoice_payload='test-invoice-payload'
    )

@bot.pre_checkout_query_handler(func=lambda query: True)
def checkout(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@bot.message_handler(content_types=['successful_payment'])
def got_payment(message):
    user_id = message.from_user.id
    amount = message.successful_payment.total_amount
    currency = message.successful_payment.currency
    add_payment(user_id, amount, currency)
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í–∞—à –ø–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")

@bot.message_handler(commands=['profile'])
def profile(message):
    user_id = message.from_user.id
    username = message.from_user.username
    usage_count = get_bot_uses_remaining(user_id)
    payment_count = get_payment_count(user_id)
    bot.send_message(message.chat.id, f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å üßô‚Äç‚ôÇÔ∏è:\n\n–ù–∏–∫–Ω–µ–π–º üîÆ: {username}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫ üõí: {payment_count}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –Ω–∞ —Å—á–µ—Ç—É ‚úÖ:{usage_count}\n–ó–∞–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –¥–µ–Ω—å –∏ –≤–∞–º –Ω–∞—á–∏—Å–ª—è—Ç—Å—è –Ω–æ–≤—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!")

if __name__ == '__main__':
    bot.polling()
